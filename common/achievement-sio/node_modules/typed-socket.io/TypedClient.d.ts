/**
 * This file is for client-side use.
 */
import { ClientSideSocketNS, internal, NamespaceSchema } from "./typedSocket";
/**
 * an interface that ensures that all possible server messages are listened to
 *
 * needed because typescript does not support handling index signature as interface
 */
export declare type ITypedClient<S extends NamespaceSchema> = {
    [k in keyof (S["ServerMessages"] & internal.GeneralServerMessages)]: (message: (S["ServerMessages"] & internal.GeneralServerMessages)[k]) => void;
};
/**
 * the same as ITypedClient but listening to events is optional
 */
export declare type ITypedPartialClient<S extends NamespaceSchema> = {
    [k in keyof (S["ServerMessages"] & internal.GeneralServerMessages)]?: (message: (S["ServerMessages"] & internal.GeneralServerMessages)[k]) => void;
};
/**
 * a class that listens to all the events we declare a method for
 *
 * usage: class MyClass extends TypedClient<S> implements ITypedClient<S>
 */
export declare abstract class TypedClient<S extends NamespaceSchema> {
    readonly socket: ClientSideSocketNS<S>;
    constructor(connectPath: string, config?: {
        forceWebsockets?: boolean;
        socketIoOpts?: any;
    });
    destructor(): void;
    connect(): void;
    connect_error(err: Error): void;
    error(msg: string): void;
    disconnect(reason: string): void;
}
