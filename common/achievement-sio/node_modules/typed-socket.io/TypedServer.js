"use strict";
/**
 * typed socket.io server (runtime component)
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = require("io-ts");
var Either_1 = require("fp-ts/lib/Either");
var PathReporter_1 = require("io-ts/lib/PathReporter");
/** use this for calls with no arguments */
exports.empty = t.union([t.undefined, t.null]);
/**
 * Usage: MyClass extends ClientSocketHandler<X> implements IClientSocketHandler<X> {...}
 */
var ClientSocketHandler = /** @class */ (function () {
    function ClientSocketHandler(socket) {
        this.socket = socket;
        // this is so you can do
        // `async some_rpc(info: typeof this._types.some_rpc.request): Promise<typeof this._types.some_rpc.response>`
        // but `typeof this` isn't supported in typescript yet
        this._types = undefined;
    }
    return ClientSocketHandler;
}());
exports.ClientSocketHandler = ClientSocketHandler;
// https://github.com/Microsoft/TypeScript/issues/12776
exports.Res = Promise;
var defaultServerConfig = {
    allowMissingHandlers: false,
    logUnsendableErrors: true,
};
/**
 * extend this class to create a typed socket.io server
 */
var Server = /** @class */ (function () {
    function Server(schema, config) {
        if (config === void 0) { config = {}; }
        this.schema = schema;
        this.__config = Object.assign({}, defaultServerConfig, config);
    }
    Server.prototype.listen = function (io) {
        var _this = this;
        var schema = this.schema;
        // todo: socket here was correctly inferred in typescript 2.6, but it is implicitly any in typescript 2.7+
        io.on("connection", function (socket) {
            var handler = _this.onConnection(socket);
            if (!handler) {
                socket.disconnect();
                return;
            }
            var _loop_1 = function (clientMessage) {
                if (typeof handler[clientMessage] !== "function") {
                    if (!_this.__config.allowMissingHandlers)
                        console.warn("No handler for " + clientMessage);
                    return "continue";
                }
                socket.on(clientMessage, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return _this.safeHandleClientMessage(handler, clientMessage, args, schema.ClientMessages[clientMessage]);
                });
            };
            for (var clientMessage in schema.ClientMessages) {
                _loop_1(clientMessage);
            }
            var _loop_2 = function (clientRPC) {
                if (typeof handler[clientRPC] !== "function") {
                    if (!_this.__config.allowMissingHandlers)
                        console.warn("No handler for " + clientRPC);
                    return "continue";
                }
                socket.on(clientRPC, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return _this.safeHandleClientRPC(handler, clientRPC, args, schema.ClientRPCs[clientRPC]["request"]);
                });
            };
            for (var clientRPC in schema.ClientRPCs) {
                _loop_2(clientRPC);
            }
        });
    };
    /**
     * called when a client sends a message that has a type error
     */
    Server.prototype.onClientMessageTypeError = function (socket, message, error) {
        console.error(socket.id + ": " + message + ": " + error);
    };
    /**
     * return what should be sent as the callback error. override this to customize. By default, the error message will be returned
     *
     * if the callback is missing, onClientMessageTypeError will be called instead
     */
    Server.prototype.onClientRPCTypeError = function (_socket, message, error) {
        return message + ": " + error;
    };
    /**
     * override this method to map server-side Promise rejections / throws to a friendly client message
     */
    Server.prototype.onClientRPCRejection = function (_socket, _message, error) {
        return error;
    };
    Server.prototype.safeHandleClientMessage = function (handler, message, args, schema) {
        if (args.length !== 1) {
            this.onClientMessageTypeError(handler.socket, message, "Invalid argument: passed " + args.length + ", expected 1");
            return;
        }
        var arg = args[0];
        var validation = schema.decode(arg);
        if (Either_1.isLeft(validation)) {
            var error = PathReporter_1.PathReporter.report(validation).join("\n");
            this.onClientMessageTypeError(handler.socket, message, "Type Error: " + error);
            return;
        }
        var safeArg = validation.value;
        try {
            handler[message](safeArg);
            return;
        }
        catch (e) {
            console.log(handler.socket.id, message, e);
        }
    };
    Server.prototype.safeHandleClientRPC = function (handler, message, args, schema) {
        return __awaiter(this, void 0, void 0, function () {
            var arg, cb, validation, error, _a, safeArg, _b, _c, e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(args.length !== 2)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.onClientMessageTypeError(handler.socket, message, "Invalid arguments: passed " + args.length + ", expected (argument, callback)")];
                    case 1:
                        _e.sent();
                        return [2 /*return*/];
                    case 2:
                        arg = args[0], cb = args[1];
                        if (!(typeof cb !== "function")) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.onClientMessageTypeError(handler.socket, message, "No callback")];
                    case 3:
                        _e.sent();
                        return [2 /*return*/];
                    case 4:
                        validation = schema.decode(arg);
                        if (!Either_1.isLeft(validation)) return [3 /*break*/, 6];
                        error = PathReporter_1.PathReporter.report(validation).join("\n");
                        _a = cb;
                        return [4 /*yield*/, this.onClientRPCTypeError(handler.socket, message, "Type Error: " + error)];
                    case 5:
                        _a.apply(void 0, [_e.sent()]);
                        return [2 /*return*/];
                    case 6:
                        safeArg = validation.value;
                        _e.label = 7;
                    case 7:
                        _e.trys.push([7, 9, , 11]);
                        _b = cb;
                        _c = [null];
                        return [4 /*yield*/, handler[message](safeArg)];
                    case 8:
                        _b.apply(void 0, _c.concat([_e.sent()]));
                        return [3 /*break*/, 11];
                    case 9:
                        e_1 = _e.sent();
                        _d = cb;
                        return [4 /*yield*/, this.onClientRPCRejection(handler.socket, message, e_1)];
                    case 10:
                        _d.apply(void 0, [_e.sent()]);
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    return Server;
}());
exports.Server = Server;
//# sourceMappingURL=TypedServer.js.map