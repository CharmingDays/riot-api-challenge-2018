/**
 * common code that can be imported from server code and client code
 */
import { NeededInfoFor, ToCompiletime } from "../../TypedServer";
import { ChatMessage } from "../basic-chat/common";
import { ServerSideClientSocket, RootServer } from "../../typedSocket";
import * as t from "io-ts";
import { ServerDefinition, SimpleNamespace } from "../..";
export { ChatMessage };
export declare const runtimeSchema: {
    ServerMessages: {
        chatMessage: t.Type<ChatMessage, ChatMessage, t.mixed>;
        history: t.Type<ChatMessage[], ChatMessage[], t.mixed>;
    };
    ClientRPCs: {
        postMessage: {
            request: t.StrictType<{
                message: t.StringType;
                channel: t.UnionType<(t.LiteralType<"en"> | t.LiteralType<"ru">)[], "en" | "ru", "en" | "ru", t.mixed>;
            }, {
                message: string;
                channel: "en" | "ru";
            }, {
                message: string;
                channel: "en" | "ru";
            }, t.mixed>;
            response: t.Type<"ok", "ok", t.mixed>;
        };
    };
    ClientMessages: {};
};
export declare type ChatNamespace = SimpleNamespace<ToCompiletime<typeof runtimeSchema>>;
export interface MyServerDefinition extends ServerDefinition {
    namespaces: {
        "/chat": ChatNamespace;
    };
}
export declare type ChatServerInfo = NeededInfoFor<MyServerDefinition, "/chat">;
export declare type ChatSocket = ServerSideClientSocket<MyServerDefinition, "/chat">;
export declare type RPCs = ChatServerInfo["NamespaceSchema"]["ClientRPCs"];
export declare type Req<K extends keyof RPCs> = RPCs[K]["request"];
export declare type Res<K extends keyof RPCs> = RPCs[K]["response"];
export declare type MyRootServer = RootServer<ServerDefinition>;
